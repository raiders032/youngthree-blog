---
globs: docs/**/*.md,blog/**/*.md
description: Docusaurus Admonitions(노트/팁/경고/위험/정보) 작성 규칙
---
### 목적
- Docusaurus Admonitions를 일관되게 사용하기 위한 팀 규칙입니다.

### 기본 원칙
- 핵심 정보만 강조합니다(섹션당 0~1개 권장).
- 한 블록에는 하나의 메시지만 담습니다.
- 간결한 문장형 한국어를 사용합니다. 과한 이모지/특수문자는 지양합니다.

### 타입과 사용 기준
- `note`: 부가 설명, 배경 정보
- `tip`: 생산성 팁, 모범 사례
- `info`: 추가 정보, 관련 자료 안내
- `warning`: 주의사항, 실수 방지 포인트
- `danger`: 심각한 경고(보안/데이터 손실/파손 위험)
- 커스텀 타입은 팀 합의 후 도입합니다(의미 중복 금지).

### 문법 규칙
- 세 개의 콜론으로 열고 닫고, 내부에 빈 줄을 둡니다.
- 제목은 대괄호로 지정하며 간결한 문장형으로 작성합니다.
- 블록 내부에서는 일반 마크다운을 사용할 수 있습니다.

```markdown
:::note[개요]
여기에 내용을 작성합니다. **마크다운** _문법_ 사용 가능.
:::
```

### 제목 규칙
- 20자 이내 문장형 권장(마침표 생략)
- 좋은 예: "설정 전에 알아두기" / 나쁜 예: "설정전에알아두기!!!"

### 중첩 규칙
- 꼭 필요한 경우에만, 최대 2단계까지 사용합니다.
- 부모 → 자식 순서로 정보 우선순위를 반영합니다.

```markdown
::::info[배포 전 체크]
배포 전 확인해야 할 항목입니다.

:::warning[환경 변수]
프로덕션 환경 변수 누락에 주의하세요.
:::
::::
```

### 포매팅/Prettier 지침
- 시작/끝 지시자 주변, 내부 블록 앞뒤에 빈 줄을 유지합니다.
- 코드블록/리스트 앞뒤에도 빈 줄을 둡니다.

```markdown
<!-- 권장 -->
:::tip[테스트 실행 순서]

1. 단위 테스트
2. 통합 테스트

:::

<!-- 비권장: 빈 줄 없음 -->
:::tip[테스트 실행 순서]
1. 단위 테스트
2. 통합 테스트
:::
```

### 안티패턴
- 단락마다 Admonition 남용
- 제목에 정보 중복(예: "경고: 위험합니다!")
- 긴 튜토리얼을 하나의 블록에 모두 담기
- 의미 불명확한 커스텀 타입 도입
- Prettier 포맷팅으로 닫힘 누락(빈 줄 미유지)

### 체크리스트
- 타입이 메시지와 맞습니까?
- 제목이 간결한 문장형입니까?
- 시작/끝, 내부 블록 앞뒤 빈 줄이 있습니까?
- 길이는 1~5문장 이내입니까?
- 코드/링크는 필요한 만큼만 포함했습니까?
- 중첩은 꼭 필요하고 2단계 이내입니까?

### 문서 전반 Markdown 포맷 가이드 (docs/ 스타일 기반)

- 헤딩
  - 본문 최상위 헤딩은 일반적으로 `##`부터 시작합니다(`hide_title` 여부 고려).
  - 번호 매기기 예: `## 1. 섹션`, `### 1.1 하위 섹션`.
  - 헤딩/문단/블록 사이에 1줄 공백을 둡니다.

- 목록(list)
  - 기본 불릿은 `- `를 사용합니다. 하위 항목은 들여쓰기 두 칸 후 `- `.
  - 문장 끝 마침표는 일관되게 사용/생략합니다(문서 내 통일).

- 코드블록
  - 항상 언어 태그를 지정합니다: `java`, `yaml`, `properties`, `gradle`, `maven`, `bash`, `mermaid` 등.
  - 코드블록 전후로 빈 줄 1줄 이상을 둡니다.
  - 핵심 라인만 포함하고 부연 설명은 코드 밖에서 제공합니다.

```java
// 예: Java 보안 설정 일부
http.authorizeHttpRequests(a -> a.anyRequest().authenticated());
```

```yaml
# 예: YAML 설정 일부
spring:
  threads:
    virtual:
      enabled: true
```

- 이미지
  - 문서 인접 `images/` 폴더를 권장합니다. 경로는 상대 경로 사용.
  - 형식: `![대체텍스트](./images/파일명.png)`

```markdown
![JUnit 아키텍처](./images/architecture.png)
```

- 링크
  - 내부 문서는 상대 경로, 외부 문서는 의미 있는 앵커 텍스트 사용.

```markdown
[뉴스 피드 시스템 설계](../SystemDesign/News-Feed-System/News-Feed-System.md)
[Spring Security OAuth2 (Servlet)](https://docs.spring.io/spring-security/reference/servlet/oauth2/index.html)
```

- 인라인 코드/경로
  - 파일/경로/명령/식별자는 백틱으로 감쌉니다(예: `docs/Spring/OAuth/OAuth/OAuth.md`).

- Mermaid 다이어그램
  - `mermaid` 코드블록 사용, 텍스트/태그는 큰따옴표를 사용하며 커스텀 색상은 지양합니다.

```mermaid
graph TD
  A["사용자"] --> B["웹 서버"]
```

- 프론트매터(frontmatter)
  - 필요 시 문서 상단에 YAML 프론트매터를 사용합니다.

```markdown
---
title: "예시 문서"
description: "문서 설명"
tags: ["JAVA", "SPRING"]
draft: false
hide_title: true
---
```

- 파일 구조
  - 주제별 가이드는 `docs/`, 시계열 글은 `blog/`에 위치합니다.
  - 이미지/첨부는 문서 인접 `images/` 또는 `static/`을 사용하고 경로 일관성을 유지합니다.

